#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef GROWTHSDK_SWIFT_H
#define GROWTHSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GrowthSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Ad type enumeration
/// Defines the ad types supported by the SDK for specifying ad styles to display.
typedef SWIFT_ENUM(NSInteger, ADStyle, open) {
/// Rewarded video ad
/// Ad type where users receive rewards after watching the complete video.
  ADStyleRewarded = 0,
/// Interstitial ad
/// Full-screen ad type that appears over the app interface.
  ADStyleInserted = 1,
/// App open ad
/// Full-screen ad type displayed when the app starts.
  ADStyleAppOpen = 2,
};

/// Ad callback protocol
/// Defines various callback methods in the ad lifecycle for monitoring ad loading, display, click and other events.
/// All callback methods are optional, developers can implement corresponding methods as needed.
SWIFT_PROTOCOL("_TtP9GrowthSDK11AdCallbacks_")
@protocol AdCallbacks
@optional
/// Ad loading started callback
/// Triggered when ad starts loading.
/// \param style Ad type
///
- (void)onStartLoading:(enum ADStyle)style;
/// Ad loading success callback
/// Triggered when ad loads successfully.
/// \param style Ad type
///
- (void)onLoadSuccess:(enum ADStyle)style;
/// Ad loading failed callback
/// Triggered when ad loading fails.
/// \param style Ad type
///
/// \param error Error information
///
- (void)onLoadFailed:(enum ADStyle)style error:(NSError * _Nullable)error;
/// Ad display success callback
/// Triggered when ad displays successfully.
/// \param style Ad type
///
- (void)onShowSuccess:(enum ADStyle)style;
/// Ad display failed callback
/// Triggered when ad display fails.
/// \param style Ad type
///
/// \param error Error information
///
- (void)onShowFailed:(enum ADStyle)style error:(NSError * _Nullable)error;
/// Ad reward received callback
/// Triggered when user completes watching rewarded video ad and receives reward.
/// \param style Ad type
///
- (void)onGetAdReward:(enum ADStyle)style;
/// Ad click callback
/// Triggered when user clicks on the ad.
/// \param style Ad type
///
- (void)onAdClick:(enum ADStyle)style;
/// Ad close callback
/// Triggered when ad is closed.
/// \param style Ad type
///
- (void)onAdClose:(enum ADStyle)style;
@end

/// Configuration item type enumeration
/// Defines various configuration types supported by the SDK for distinguishing different configuration requests.
typedef SWIFT_ENUM(NSInteger, ConfigItem, open) {
/// General configuration
/// Used to obtain general SDK configuration information such as ad configurations.
  ConfigItemConfig = 0,
/// Adjust configuration
/// Used to obtain Adjust analytics service configuration information.
  ConfigItemAdjust = 1,
/// Ad unit configuration
/// Used to obtain ad unit configuration information.
  ConfigItemAdUnit = 2,
/// Link configuration
/// Used to obtain in-app web link presentation configuration (e.g., whether to show and which link to show).
  ConfigItemLink = 3,
};

@class NSString;
/// Configuration key item
/// Represents a configuration request item containing configuration key and corresponding configuration type.
SWIFT_CLASS("_TtC9GrowthSDK13ConfigKeyItem")
@interface ConfigKeyItem : NSObject
/// Configuration key
/// Unique key value for identifying specific configuration.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Configuration type
/// Specifies the type of configuration such as general configuration, Adjust configuration, etc.
@property (nonatomic, readonly) enum ConfigItem item;
/// Initialize configuration key item
/// \param key Configuration key
///
/// \param item Configuration type
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key item:(enum ConfigItem)item OBJC_DESIGNATED_INITIALIZER;
/// Create general configuration key item
/// \param configKey General configuration key
///
- (nonnull instancetype)initWithConfigKey:(NSString * _Nonnull)configKey;
/// Create Adjust configuration key item
/// \param adjustKey Adjust configuration key
///
- (nonnull instancetype)initWithAdjustKey:(NSString * _Nonnull)adjustKey;
/// Create ad unit configuration key item
/// \param adUnitKey Ad unit configuration key
///
- (nonnull instancetype)initWithAdUnitKey:(NSString * _Nonnull)adUnitKey;
/// Create link configuration key item
/// \param linkKey Link configuration key used to fetch remote link settings
/// (e.g., enable switch and candidate link list) from the server.
///
- (nonnull instancetype)initWithLinkKey:(NSString * _Nonnull)linkKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum InitState : NSInteger;
@class NetworkConfig;
/// GrowthSDK main class
/// This is the core class of GrowthSDK, providing SDK initialization and status management
/// functionality. Uses singleton pattern, accessed through the <code>shared</code> property.
/// <h2>Usage Example</h2>
/// \code
/// // Create configuration
/// let config = NetworkConfig(
///     serviceId: "your_service_id",
///     bundleName: "your_bundle_name",
///     serviceUrl: "https://your-service.com",
///     serviceKey: "your_service_key",
///     serviceIv: "your_service_iv",
///     publicKey: "your_public_key"
/// )
///
/// // Initialize SDK
/// GrowthKit.shared.initialize(with: config) { error in
///     if let error = error {
///         print("Initialization failed: \(error)")
///     } else {
///         print("Initialization successful")
///     }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC9GrowthSDK9GrowthKit")
@interface GrowthKit : NSObject
/// SDK singleton instance
/// Access the unique instance of GrowthSDK through this property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GrowthKit * _Nonnull shared;)
+ (GrowthKit * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Current SDK initialization status
/// Used to monitor SDK initialization status changes.
@property (nonatomic, readonly) enum InitState state;
/// Whether SDK is initialized
/// A convenience property for quickly checking if SDK initialization is complete.
/// This property is <code>true</code> when <code>state</code> is <code>.initialized</code>.
@property (nonatomic, readonly) BOOL isInitialized;
/// Whether logging is enabled
/// Controls SDK internal log output. Default is <code>false</code>, set to <code>true</code> to enable logging.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLoggingEnabled;)
+ (BOOL)isLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLoggingEnabled:(BOOL)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize SDK (Objective-C interface)
/// Initialize SDK using callback approach, suitable for Objective-C projects.
/// <h2>Usage Example</h2>
/// \code
/// NetworkConfig *config = [[NetworkConfig alloc] initWithServiceId:@"your_id"
///                                                      bundleName:@"your_bundle"
///                                                      serviceUrl:@"https://your-service.com"
///                                                      serviceKey:@"your_key"
///                                                      serviceIv:@"your_iv"
///                                                      publicKey:@"your_public_key"];
///
/// [GrowthKit.shared initializeWithConfig:config
///                           launchOptions:nil
///                              completion:^(NSError *error) {
///     if (error) {
///         NSLog(@"Initialization failed: %@", error.localizedDescription);
///     } else {
///         NSLog(@"Initialization successful");
///     }
/// }];
///
/// \endcode\param config SDK configuration information, including service ID, keys and other required parameters
///
/// \param launchOptions Application launch options for analytics SDK initialization
///
/// \param completion Initialization completion callback; error is nil on success, contains error information on failure
///
- (void)initializeWith:(NetworkConfig * _Nonnull)config launchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

@interface GrowthKit (SWIFT_EXTENSION(GrowthSDK))
/// SDK version number
/// Returns the current SDK version number in “x.y.z” format.
/// <h2>Usage Example</h2>
/// \code
/// let version = GrowthKit.sdkVersion
/// print("Current SDK version: \(version)")
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
@interface GrowthKit (SWIFT_EXTENSION(GrowthSDK))
/// Create main view controller
/// Creates a view controller containing Unity view and SDK functionality.
/// Suitable for UIKit projects or scenarios requiring custom view controllers.
/// <h2>Usage Example</h2>
/// \code
/// // Assuming unityController is Unity's view controller
/// let sdkController = GrowthKit.createController(with: unityController)
///
/// // Set SDK controller as root view controller
/// window?.rootViewController = sdkController
///
/// \endcode\param unityController Unity view controller containing Unity game view
///
///
/// returns:
/// View controller integrated with SDK functionality
+ (UIViewController * _Nonnull)createControllerWith:(UIViewController * _Nonnull)unityController SWIFT_WARN_UNUSED_RESULT;
@end

@interface GrowthKit (SWIFT_EXTENSION(GrowthSDK))
/// Whether showing web link is allowed
/// The value comes from the server-side link configuration switch. When <code>true</code>,
/// the app may present a built-in web link entry. When <code>false</code> or not configured,
/// no related entry should be shown.
///
/// returns:
/// A boolean indicating whether showing a web link is allowed.
@property (nonatomic, readonly) BOOL isShowWebLink;
/// Recommended web link to present
/// Returns a usable link (randomly selected from the configured list) when
/// <code>isShowWebLink == true</code>. Returns <code>nil</code> when the switch is off or no links
/// are available. Callers should check <code>isShowWebLink</code> before using this value.
///
/// returns:
/// A recommended link URL string or <code>nil</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable webLink;
@end

@interface GrowthKit (SWIFT_EXTENSION(GrowthSDK))
/// Reload app open ad
/// Force reload app open ad, typically called when ad display fails or needs refresh.
/// Only executes when SDK is initialized and app open ad SDK is initialized.
/// <h2>Usage Example</h2>
/// \code
/// GrowthKit.shared.reloadAppOpenAd()
///
/// \endcode
- (void)reloadAppOpenAd;
/// Reload bidding ads
/// Force reload all bidding ads including rewarded video and interstitial ads.
/// Only executes when SDK is initialized and video ad SDK is initialized.
/// <h2>Usage Example</h2>
/// \code
/// GrowthKit.shared.reloadBiddingAd()
///
/// \endcode
- (void)reloadBiddingAd;
/// Show ad (static method, with callbacks)
/// Convenient static method for displaying specified ad type and handling callback events.
/// <h2>Usage Example</h2>
/// \code
/// class MyAdCallbacks: NSObject, AdCallbacks {
///     func onShowSuccess(_ style: ADStyle) {
///         print("Ad display successful")
///     }
///
///     func onAdClose(_ style: ADStyle) {
///         print("Ad closed")
///     }
/// }
///
/// let callbacks = MyAdCallbacks()
/// GrowthKit.showAd(with: .rewarded, callbacks: callbacks)
///
/// \endcode\param style Ad type to display
///
/// \param callbacks Ad callback object for monitoring ad events
///
+ (void)showAdWith:(enum ADStyle)style callbacks:(id <AdCallbacks> _Nullable)callbacks;
/// Show ad (instance method, with callbacks)
/// Display specified ad type and handle callback events. This is the core method for ad display.
/// <h2>Usage Example</h2>
/// \code
/// class MyAdCallbacks: NSObject, AdCallbacks {
///     func onStartLoading(_ style: ADStyle) {
///         print("Ad loading started")
///     }
///
///     func onLoadSuccess(_ style: ADStyle) {
///         print("Ad loaded successfully")
///     }
///
///     func onShowSuccess(_ style: ADStyle) {
///         print("Ad display successful")
///     }
///
///     func onGetAdReward(_ style: ADStyle) {
///         print("Ad reward received")
///         // Give reward to user here
///     }
///
///     func onAdClose(_ style: ADStyle) {
///         print("Ad closed")
///     }
/// }
///
/// let callbacks = MyAdCallbacks()
/// GrowthKit.shared.showAd(with: .rewarded, callbacks: callbacks)
///
/// \endcode<h2>Notes</h2>
/// <ul>
///   <li>
///     Ads can only be displayed when SDK is initialized
///   </li>
///   <li>
///     Different ad types have different display logic and callback events
///   </li>
///   <li>
///     Rewarded video ads require users to watch completely to receive rewards
///   </li>
/// </ul>
/// \param style Ad type to display
///
/// \param callbacks Ad callback object for monitoring ad events
///
- (void)showAdWith:(enum ADStyle)style callbacks:(id <AdCallbacks> _Nullable)callbacks;
/// Show ad debugger
/// Display ad SDK debug interface for viewing ad status and configuration during development and testing.
/// <h2>Usage Example</h2>
/// \code
/// GrowthKit.shared.showAdDebugger()
///
/// \endcode
- (void)showAdDebugger;
@end

/// SDK initialization status enumeration
/// Represents the current initialization status of GrowthSDK. Developers can use this status
/// to determine if the SDK is available.
typedef SWIFT_ENUM(NSInteger, InitState, open) {
/// Uninitialized state
/// SDK has not started initialization process. All features are unavailable at this time.
  InitStateUninitialized = 0,
/// Initializing state
/// SDK is currently initializing various components.
  InitStateInitializing = 1,
/// Initialized state
/// SDK initialization completed successfully. All features are available.
  InitStateInitialized = 2,
/// Failed state
/// SDK initialization failed. Re-initialization is required.
  InitStateFailed = 3,
};

/// Network configuration class
/// Main configuration class for SDK, implements NetworkConfigurable protocol.
/// Contains all configuration parameters required for SDK operation.
/// <h2>Usage Example</h2>
/// \code
/// let config = NetworkConfig(
///     serviceId: "your_service_id",
///     bundleName: "com.yourcompany.yourapp",
///     serviceUrl: "https://your-service.com",
///     serviceKey: "your_service_key",
///     serviceIv: "your_service_iv",
///     publicKey: "your_public_key",
///     configKeyItems: [
///         ConfigKeyItem(configKey: "your_config_key"),
///         ConfigKeyItem(adjustKey: "your_adjust_key")
///     ],
///     thirdId: "your_third_id"
/// )
///
/// \endcode
SWIFT_CLASS("_TtC9GrowthSDK13NetworkConfig")
@interface NetworkConfig : NSObject
/// Service ID
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceId;
/// Application bundle name
@property (nonatomic, readonly, copy) NSString * _Nonnull bundleName;
/// Service URL
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceUrl;
/// Service key
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceKey;
/// Service initialization vector
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceIv;
/// Public key
@property (nonatomic, readonly, copy) NSString * _Nonnull publicKey;
/// Configuration key items list
@property (nonatomic, readonly, copy) NSArray<ConfigKeyItem *> * _Nullable configKeyItems;
/// Third-party ID
@property (nonatomic, copy) NSString * _Nullable thirdId;
/// Initialize network configuration
/// \param serviceId Service ID
///
/// \param bundleName Application bundle name
///
/// \param serviceUrl Service URL
///
/// \param serviceKey Service key
///
/// \param serviceIv Service initialization vector
///
/// \param publicKey Public key
///
/// \param configKeyItems Configuration key items list, optional
///
/// \param thirdId Third-party ID, optional
///
- (nonnull instancetype)initWithServiceId:(NSString * _Nonnull)serviceId bundleName:(NSString * _Nonnull)bundleName serviceUrl:(NSString * _Nonnull)serviceUrl serviceKey:(NSString * _Nonnull)serviceKey serviceIv:(NSString * _Nonnull)serviceIv publicKey:(NSString * _Nonnull)publicKey configKeyItems:(NSArray<ConfigKeyItem *> * _Nullable)configKeyItems thirdId:(NSString * _Nullable)thirdId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
